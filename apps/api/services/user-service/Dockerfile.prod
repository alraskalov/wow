# Этап 1: Сборка и подготовка файлов
FROM node:20 AS builder
WORKDIR /app
RUN npm install -g turbo
COPY . .
# Создаем "облегченную" версию монорепы только для user-service
RUN turbo prune --scope=@wow-nexus/user-service --docker

# Этап 2: Установка всех зависимостей (включая dev)
FROM node:20 AS installer
WORKDIR /app
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/package-lock.json .
RUN npm install

# Этап 3: Финальная сборка TypeScript в JavaScript
FROM node:20 AS final-builder
WORKDIR /app
COPY --from=builder /app/out/full/ .
COPY --from=installer /app/node_modules ./node_modules
WORKDIR /app/apps/api/services/user-service
RUN npx prisma generate
RUN npm run build

# Этап 4: Установка только production-зависимостей
FROM node:20 AS prod-installer
WORKDIR /app
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/package-lock.json .
RUN npm install --omit=dev

# Этап 5: Финальный production-образ
FROM node:20-alpine AS production
WORKDIR /app

# Создаем пользователя с ограниченными правами для безопасности
RUN addgroup -S node && adduser -S node -G node

# Копируем production-зависимости
COPY --from=prod-installer --chown=node:node /app/node_modules ./node_modules
# Копируем собранный код
COPY --from=final-builder --chown=node:node /app/apps/api/services/user-service/dist ./dist
# Копируем package.json
COPY --from=final-builder --chown=node:node /app/apps/api/services/user-service/package.json .
# Копируем схему Prisma для Prisma Client
COPY --from=final-builder --chown=node:node /app/apps/api/services/user-service/prisma ./prisma
# Копируем startup скрипт
COPY --from=final-builder --chown=node:node /app/apps/api/services/user-service/start.sh ./start.sh

# Делаем скрипт исполняемым
RUN chmod +x start.sh

USER node

CMD ["./start.sh"] 