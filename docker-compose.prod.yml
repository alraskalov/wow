version: '3.8'

networks:
  warcraft-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

services:
  # --- База данных PostgreSQL ---
  postgres:
    image: postgres:16-alpine
    container_name: warcraft-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - warcraft-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 30s
      timeout: 10s
      retries: 3

  # --- Redis ---
  redis:
    image: redis:7-alpine
    container_name: warcraft-redis-prod
    restart: unless-stopped
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis-data:/data
    networks:
      - warcraft-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # --- User Service (NestJS) ---
  user-service:
    build:
      context: .
      dockerfile: ./apps/api/services/user-service/Dockerfile
      target: production
    container_name: warcraft-user-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      PORT: ${USER_SERVICE_PORT:-3001}
    ports:
      - '${USER_SERVICE_PORT:-3001}:${USER_SERVICE_PORT:-3001}'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - warcraft-network
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-f',
          'http://localhost:${USER_SERVICE_PORT:-3001}/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- API Gateway (NestJS) ---
  gateway:
    build:
      context: .
      dockerfile: ./apps/api/gateway/Dockerfile
      target: production
    container_name: warcraft-gateway-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: ${GATEWAY_PORT:-3000}
      USER_SERVICE_URL: http://user-service:${USER_SERVICE_PORT:-3001}
    ports:
      - '${GATEWAY_PORT:-3000}:${GATEWAY_PORT:-3000}'
    depends_on:
      - user-service
    networks:
      - warcraft-network
    healthcheck:
      test:
        ['CMD', 'curl', '-f', 'http://localhost:${GATEWAY_PORT:-3000}/health']
      interval: 30s
      timeout: 10s
      retries: 3
