version: '3.8'

networks:
  warcraft-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

services:
  # --- База данных PostgreSQL ---
  postgres:
    image: postgres:16-alpine
    container_name: warcraft-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-warcraft}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-warcraft123}
      POSTGRES_DB: ${POSTGRES_DB:-warcraft_db}
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - warcraft-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-warcraft} -d ${POSTGRES_DB:-warcraft_db}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Redis ---
  redis:
    image: redis:7-alpine
    container_name: warcraft-redis
    restart: unless-stopped
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis-data:/data
    networks:
      - warcraft-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # --- User Service (NestJS) ---
  user-service:
    build:
      context: .
      dockerfile: ./apps/api/services/user-service/Dockerfile.dev
    container_name: warcraft-user-service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-warcraft}:${POSTGRES_PASSWORD:-warcraft123}@postgres:5432/${POSTGRES_DB:-warcraft_db}
      REDIS_URL: redis://redis:6379
      PORT: ${USER_SERVICE_PORT:-3001}
      CHOKIDAR_USEPOLLING: 'true'
      WATCHPACK_POLLING: 'true'
      NODEMON_POLLING: 'true'
      NODEMON_LEGACY_WATCH: 'false'
    ports:
      - '${USER_SERVICE_PORT:-3001}:${USER_SERVICE_PORT:-3001}'
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - warcraft-network
    command: sh -c "echo 'Waiting for database...' && while ! nc -z postgres 5432; do sleep 1; done && echo 'Database is ready!' && cd /app/apps/api/services/user-service && npx prisma migrate deploy && npm run start:dev"

  # --- API Gateway (NestJS) ---
  gateway:
    build:
      context: .
      dockerfile: ./apps/api/gateway/Dockerfile.dev
    container_name: warcraft-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: ${GATEWAY_PORT:-3000}
      USER_SERVICE_URL: http://user-service:${USER_SERVICE_PORT:-3001}
      CHOKIDAR_USEPOLLING: 'true'
      WATCHPACK_POLLING: 'true'
      NODEMON_POLLING: 'true'
      NODEMON_LEGACY_WATCH: 'false'
    ports:
      - '${GATEWAY_PORT:-3000}:${GATEWAY_PORT:-3000}'
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - user-service
    networks:
      - warcraft-network
    command: npm run start:dev --prefix apps/api/gateway
